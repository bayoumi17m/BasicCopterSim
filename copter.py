import numpy as np
import math
import scipy.integrate
import datetime
import threading


class Propellor(object):
    """
    This class controls a propellor for the copter class below
    Each instance of the propellor will rely on its physical parameters
    and thus will generate different thrusts or move at different speeds.

    Instance Attributes:
        diameter: The diameter of the propellor in inches [float or int]
        pitch: The pitch of the propellor in inches [float or int]
        speed: The RPM of the propellor at time t in rotation/min [float or int]
        thrust: The force generated by the propellor in Newtons [float or int]
    """
    def __init__(self, diameter, pitch):
        """docstring for the initializtion of the Propellor"""
        self.diameter = diameter
        self.pitch = pitch
        self.speed = 0 # RPM of the Propellor
        self.thrust = 0

    def setSpeed(self, speed):
        """docstring for setting the speed"""
        self.speed = speed
        ### The link below was used for thrust calculations, this is a
        ### simplified form, which will undershoot dynamic thrust and
        ### overshoot static thrust by ~ 15%-30%
        ### http://www.electricrcaircraftguy.com/2013/09/propeller-static-dynamic-thrust-equation.html
        self.thrust = 4.392e-8 * self.speed * math.pow(self.diameter,3.5)
        self.thrust = self.thrust / math.sqrt(self.pitch)
        self.thrust = self.thrust * (4.23e-4 * self.speed * self.pitch)


class Copter(object):
    """Abstract Class for Drones with Propellors"""
    def __init__(self, wings, gravity = 9.81, b = 0.0245):
        self.wings = wings
        self.g = gravity
        self.b = b
        self.thread = None
        self.ode =  scipy.integrate.ode(self.state_dot).set_integrator('vode',nsteps=500,method='bdf')
        self.time = datetime.datetime.now()
        # Use a dictionary to store information about the Copters before init
        for key in self.wings:
            self.wings[key]['state'] = np.zeros(12)
            self.wings[key]['state'][0:3] = self.wings[key]['position']
            self.wings[key]['state'][6:9] = self.wings[key]['orientation']
            self.setupWings(key)
            # From Quadrotor Dynamics and Control by Randal Beard
            ixx=((2*self.wings[key]['weight']*self.wings[key]['r']**2)/5)+(2*self.wings[key]['weight']*self.wings[key]['L']**2)
            iyy=ixx
            izz=((2*self.wings[key]['weight']*self.wings[key]['r']**2)/5)+(4*self.wings[key]['weight']*self.wings[key]['L']**2)
            self.wings[key]['I'] = np.array([[ixx,0,0],[0,iyy,0],[0,0,izz]])
            self.wings[key]['invI'] = np.linalg.inv(self.wings[key]['I'])
        self.run = True

    def setupWings(self,key,num_wings):
        for i in range(num_wings):
        self.wings[key]['m' + str(i+1)] = Propeller(self.wings[key]['prop_size'][0],self.wings[key]['prop_size'][1])
